from cryptsenal.rsa import RSA
import pytest


def test_encryption():
    msg = "Park the car in Aardvark Yard"

    keys = [(97070383250233971841774702808771187124334808610363696413966803814093856799057,
             635243631921992861771238262012186770301111032058803018196453052457341505006048586702152591371415134379565757413092511901332269402507844222435080099891905,
             9327464648185548366860536874447796198616468195978640079610110754020026014255989398684657715612251244878645290140324945894041210334099038944456891749231961),
            (68336184187116214954812762884479098315555011299038563811694000948032766704371,
             520286344283023565986326312400414123381162635287049712966755892807931426818557272055717157700191931933304041989535944523511516142816559209379478453400223,
             7526739862571034113755500731406192867948494260086090564201537525422241689978572928188154134584091531510980611117955773195134508455289954856804763314068599),
            (280429057991355262557966332805193413313,
             15127561072928433940498641801823155112203513415262046659335568903986519651777,
             99702197461555896255110910889057860277604100673462285235266659906106826614607),
            (257922976526335621189802819709513716839,
             14000769378992276876592856480400520536574309188492197424039699092230897793579,
             40822478708506673982558414476400184615803888455074679812830333585916301043089),
            (27076411488863747630307530910493208565170703270955966459582622047134219301397947136188362384729673048418267764592921467343669592798007901906084153199790936143792886363936452882143470133715728807417763882876804110404427988292818177025590130980721640443215594083651277203839205409350181538364664218924002481954418428589139133978311666081986785467703830091691013850719292527887732444367035910142493574260909449645408103431673243823409517655636986651531075988505793221577082829415914538593023868730582717326717824100742566263964173248838585706909441847717049011417673201111064734849567030428449255797657216905646915068701,
             1096436867730935663441712917766790959487150414622458748583826806754146808025483539190255791549072200969554276255307159491027417262864814936132018251776577618734283218931144308380459941759178741782972985757532813682703267382495455712621169905882608040019534446564506628858674483628085516881287271015490938908312699760927701447611183893122741543227630231303844386727926568346168389419208334800004801298369750415651087587922483955547808671041121286954172785601925531464949325976281656057003372518966579238936782492547601966193893150463981108973144125609137539707312441494104917166057258163491809890785070889156196718995503842098973042893045558478633027861985229439082497771648699781000680689543142049697521543448532592050223764474056547695542981239381484665455150619430474639404367410260008657085536504168276754320868306704165956077443940678737654299827599280654764976563036909332211613144891710538970811762762866493471627500852539328361474987127250139632401580053017463787519254924419746479535817693199920942025382152606588042134546033492079440181176226513379753444625409326270296907593606864079505369624108467446823765269169595959676578749890732384673771075734836076772460894227121264216052923767866646120698427422074103764931726481,
             612440970055170831905277568050255759792852045216141414971234176595852331107321655721658966618811407846536552871557452417905897235400083421142409554736448389856144292290126158817418077852408596897485207494302857839082867225825382443674527096397215015568996460289568096370661482221214651895559380578637975110594537307284071979862514490726208857734832752297076233044592115040256772149500009620873485733633875171133004320606136008894640219439147690361356348655725176151965989175012825938129952604671207520838293888362322004698884776463014930454513614297716461109043595331915339820834992082582293877686485403696111511358579292880027949557594935743999881477862220684343076629996533413405924504619995006771130357791995714551448952109718408691106970883794013869359858137032875947097082425663912647828099645299835354700887602523246082359195310623396228304903025439581793266693088848318194402840305424749013612567549384082544867901815316705796657322833772096211644807516560197259441367847252266859719420755732580890751925178847711180018786608663769933969560389560292539362187367103482336572437221710164583243064663100491848190852619453650921793998934677126771193510555438820165568271738817684466376593709967588307598503733626591792066697855269)]

    encrypted = [4014178736013472579676249518498221952514273355439764739395591715376965061974516161744663424324896201446400893941472023345144960787449723472609417984381622,
                 6175384298455759068017934752789190838953791924539102464103914484886040442343707225979960681309611028334224845201540333544681464603952359084042014664465852,
                 63361821191603034246180581866148649389209986823623852554503617707565177719002,
                 4541550206184539162280908499429599713447037751640825642610697805125484928499,
                 323795126630113095752880186795803390912796445335049321602634251208118534162836813132267807363559725736231656081033503597236411545811459268725491557837009108699838499524211199743997799580970140591843052610173977608240081841568902456336014862603703401489409177999959333927353084210393689571431665039036566995138030721751258070970403536105307348228350266146674280534286566632658364570467463241149482653781392477966758242020596472414912571506400419188765998657565354309605884288972594606748276444301773444258442499534641272555868025827731565871046586706939852127743200570242959688184364570660047026936602400864305290656805771178799529983876747678718290899549140272285413850641624031157810538293559952415862269261611058071578409789326030925628221959135904941753103700320196005781451904561747316802035896506443297637895186040156749636749723954690522021211078753494039768788140851754975348900397034996976668402094882339411875640122886327911247556413273721811729454889171605270608846247364350115535002245142109791794111921192256214739146649200660172764947285028888554312564090296577765482936287896072616649441662306897958524690188067025992656449712514615749397196468975074148514023507864652323834095524657755338249176862632696415220986025917]
    for key, encrypt in zip(keys, encrypted):
        assert RSA(msg, key).encrypt() == encrypt


def test_decryption():
    msg = "Park the car in Aardvark Yard"

    keys = [(97070383250233971841774702808771187124334808610363696413966803814093856799057,
             635243631921992861771238262012186770301111032058803018196453052457341505006048586702152591371415134379565757413092511901332269402507844222435080099891905,
             9327464648185548366860536874447796198616468195978640079610110754020026014255989398684657715612251244878645290140324945894041210334099038944456891749231961),
            (68336184187116214954812762884479098315555011299038563811694000948032766704371,
             520286344283023565986326312400414123381162635287049712966755892807931426818557272055717157700191931933304041989535944523511516142816559209379478453400223,
             7526739862571034113755500731406192867948494260086090564201537525422241689978572928188154134584091531510980611117955773195134508455289954856804763314068599),
            (280429057991355262557966332805193413313,
             15127561072928433940498641801823155112203513415262046659335568903986519651777,
             99702197461555896255110910889057860277604100673462285235266659906106826614607),
            (257922976526335621189802819709513716839,
             14000769378992276876592856480400520536574309188492197424039699092230897793579,
             40822478708506673982558414476400184615803888455074679812830333585916301043089),
            (27076411488863747630307530910493208565170703270955966459582622047134219301397947136188362384729673048418267764592921467343669592798007901906084153199790936143792886363936452882143470133715728807417763882876804110404427988292818177025590130980721640443215594083651277203839205409350181538364664218924002481954418428589139133978311666081986785467703830091691013850719292527887732444367035910142493574260909449645408103431673243823409517655636986651531075988505793221577082829415914538593023868730582717326717824100742566263964173248838585706909441847717049011417673201111064734849567030428449255797657216905646915068701,
             1096436867730935663441712917766790959487150414622458748583826806754146808025483539190255791549072200969554276255307159491027417262864814936132018251776577618734283218931144308380459941759178741782972985757532813682703267382495455712621169905882608040019534446564506628858674483628085516881287271015490938908312699760927701447611183893122741543227630231303844386727926568346168389419208334800004801298369750415651087587922483955547808671041121286954172785601925531464949325976281656057003372518966579238936782492547601966193893150463981108973144125609137539707312441494104917166057258163491809890785070889156196718995503842098973042893045558478633027861985229439082497771648699781000680689543142049697521543448532592050223764474056547695542981239381484665455150619430474639404367410260008657085536504168276754320868306704165956077443940678737654299827599280654764976563036909332211613144891710538970811762762866493471627500852539328361474987127250139632401580053017463787519254924419746479535817693199920942025382152606588042134546033492079440181176226513379753444625409326270296907593606864079505369624108467446823765269169595959676578749890732384673771075734836076772460894227121264216052923767866646120698427422074103764931726481,
             612440970055170831905277568050255759792852045216141414971234176595852331107321655721658966618811407846536552871557452417905897235400083421142409554736448389856144292290126158817418077852408596897485207494302857839082867225825382443674527096397215015568996460289568096370661482221214651895559380578637975110594537307284071979862514490726208857734832752297076233044592115040256772149500009620873485733633875171133004320606136008894640219439147690361356348655725176151965989175012825938129952604671207520838293888362322004698884776463014930454513614297716461109043595331915339820834992082582293877686485403696111511358579292880027949557594935743999881477862220684343076629996533413405924504619995006771130357791995714551448952109718408691106970883794013869359858137032875947097082425663912647828099645299835354700887602523246082359195310623396228304903025439581793266693088848318194402840305424749013612567549384082544867901815316705796657322833772096211644807516560197259441367847252266859719420755732580890751925178847711180018786608663769933969560389560292539362187367103482336572437221710164583243064663100491848190852619453650921793998934677126771193510555438820165568271738817684466376593709967588307598503733626591792066697855269)]

    encrypted = [4014178736013472579676249518498221952514273355439764739395591715376965061974516161744663424324896201446400893941472023345144960787449723472609417984381622,
                 6175384298455759068017934752789190838953791924539102464103914484886040442343707225979960681309611028334224845201540333544681464603952359084042014664465852,
                 63361821191603034246180581866148649389209986823623852554503617707565177719002,
                 4541550206184539162280908499429599713447037751640825642610697805125484928499,
                 323795126630113095752880186795803390912796445335049321602634251208118534162836813132267807363559725736231656081033503597236411545811459268725491557837009108699838499524211199743997799580970140591843052610173977608240081841568902456336014862603703401489409177999959333927353084210393689571431665039036566995138030721751258070970403536105307348228350266146674280534286566632658364570467463241149482653781392477966758242020596472414912571506400419188765998657565354309605884288972594606748276444301773444258442499534641272555868025827731565871046586706939852127743200570242959688184364570660047026936602400864305290656805771178799529983876747678718290899549140272285413850641624031157810538293559952415862269261611058071578409789326030925628221959135904941753103700320196005781451904561747316802035896506443297637895186040156749636749723954690522021211078753494039768788140851754975348900397034996976668402094882339411875640122886327911247556413273721811729454889171605270608846247364350115535002245142109791794111921192256214739146649200660172764947285028888554312564090296577765482936287896072616649441662306897958524690188067025992656449712514615749397196468975074148514023507864652323834095524657755338249176862632696415220986025917]
    for key, encrypt in zip(keys, encrypted):
        assert RSA(encrypt, key).decrypt() == msg
